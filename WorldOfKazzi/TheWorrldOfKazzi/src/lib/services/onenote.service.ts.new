import type { Notebook, OnenoteSection, OnenotePage } from '@microsoft/microsoft-graph-types';
import { azureAuthService } from './azure-auth.js';
import { Client } from '@microsoft/microsoft-graph-client';
import { NOTEBOOK_CONFIG } from './notebook-config.js';

export class OneNoteService {
    async getGraphClient() {
        try {
            // Ensure Azure auth service is initialized first
            await azureAuthService.initialize();
            
            // Get a fresh Graph API token
            const token = await azureAuthService.acquireTokenForGraph();
            
            console.log('OneNote Service: Got token for Graph client');
            
            return Client.init({
                authProvider: (callback) => {
                    callback(null, token);
                }
            });
        } catch (error) {
            console.error('Error creating Graph client:', error);
            throw new Error('Failed to authenticate - please try logging in again');
        }
    }

    async shareNotebook(notebookId: string): Promise<void> {
        try {
            console.log('Sharing notebook...');
            const client = await this.getGraphClient();
            
            // First, get the drive item ID for the notebook
            const notebook = await client
                .api(`/me/onenote/notebooks/${notebookId}`)
                .select('links')
                .get();
            
            if (!notebook.links?.oneNoteWebUrl) {
                throw new Error('Notebook Web URL not found');
            }
            
            // Parse the URL to get the drive item ID
            const urlParts = notebook.links.oneNoteWebUrl.split('/');
            const driveIndex = urlParts.indexOf('drive');
            if (driveIndex === -1) throw new Error('Drive ID not found in notebook URL');
            const driveId = urlParts[driveIndex + 1];
            const itemId = urlParts[urlParts.indexOf('item') + 1];
            
            // Create a sharing link with "view" permissions for anyone
            await client
                .api(`/drives/${driveId}/items/${itemId}/createLink`)
                .post({
                    type: 'view',
                    scope: 'anonymous'
                });
                
            console.log('Notebook shared successfully');
        } catch (error) {
            console.error('Error sharing notebook:', error);
            throw error;
        }
    }

    async getNotebooks(): Promise<Notebook[]> {
        try {
            // Use direct fetch to avoid Graph client licensing issues
            await azureAuthService.initialize();
            const token = await azureAuthService.acquireTokenForGraph();
            
            console.log('OneNote Service: Fetching notebooks...');
            
            const response = await fetch('https://graph.microsoft.com/v1.0/me/onenote/notebooks', {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Notebooks fetch failed:', response.status, errorText);
                throw new Error(`Failed to get notebooks: ${response.status} - ${errorText}`);
            }
            
            const data = await response.json();
            console.log('OneNote Service: Notebooks loaded:', data.value?.length || 0);
            return data.value || [];
            
        } catch (error) {
            console.error('Error fetching notebooks:', error);
            throw error;
        }
    }

    async getSections(notebookId: string): Promise<OnenoteSection[]> {
        try {
            // Use direct fetch for sections
            await azureAuthService.initialize();
            const token = await azureAuthService.acquireTokenForGraph();
            
            console.log('OneNote Service: Fetching sections for notebook:', notebookId);
            
            const response = await fetch(`https://graph.microsoft.com/v1.0/me/onenote/notebooks/${notebookId}/sections`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Sections fetch failed:', response.status, errorText);
                throw new Error(`Failed to get sections: ${response.status} - ${errorText}`);
            }
            
            const data = await response.json();
            console.log('OneNote Service: Sections loaded:', data.value?.length || 0);
            return data.value || [];
            
        } catch (error) {
            console.error('Error fetching sections:', error);
            throw error;
        }
    }

    async getPages(): Promise<any[]> {
        try {
            // Use direct fetch for pages from the DND notebook
            await azureAuthService.initialize();
            const token = await azureAuthService.acquireTokenForGraph();
            
            console.log('OneNote Service: Fetching pages from DND notebook...');
            
            const response = await fetch(`https://graph.microsoft.com/v1.0/me/onenote/notebooks/${NOTEBOOK_CONFIG.notebookId}/pages`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Pages fetch failed:', response.status, errorText);
                throw new Error(`Failed to get pages: ${response.status} - ${errorText}`);
            }
            
            const data = await response.json();
            console.log('OneNote Service: Pages loaded:', data.value?.length || 0);
            return data.value || [];
            
        } catch (error) {
            console.error('Error fetching pages:', error);
            throw error;
        }
    }

    async getPageContent(pageId: string): Promise<string> {
        try {
            // Use direct fetch for page content
            await azureAuthService.initialize();
            const token = await azureAuthService.acquireTokenForGraph();
            
            console.log('OneNote Service: Fetching content for page:', pageId);
            
            const response = await fetch(`https://graph.microsoft.com/v1.0/me/onenote/pages/${pageId}/content`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Accept': 'text/html'
                }
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Page content fetch failed:', response.status, errorText);
                throw new Error(`Failed to get page content: ${response.status} - ${errorText}`);
            }
            
            const content = await response.text();
            console.log('OneNote Service: Page content loaded, length:', content.length);
            return content;
            
        } catch (error) {
            console.error('Error fetching page content:', error);
            throw error;
        }
    }
}

export const oneNoteService = new OneNoteService();
